{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Sostituisci con l'URL del tuo backend API\nexport let DraggableElementComponent = /*#__PURE__*/(() => {\n  class DraggableElementComponent {\n    constructor(http) {\n      this.http = http;\n      this.isDragging = false;\n      this.draggedElement = null;\n      this.apiUrl = 'https://localhost:7164';\n    }\n    ngOnInit() {\n      this.getCoordinatesByName('elemento1');\n    }\n    onDrag(event) {\n      if (this.isDragging && this.draggedElement) {\n        this.draggedElement.style.left = event.clientX + 'px';\n        this.draggedElement.style.top = event.clientY + 'px';\n      }\n    }\n    onDragEnd(event) {\n      if (this.isDragging && this.draggedElement) {\n        this.isDragging = false;\n        // Ottieni le coordinate dell'elemento trascinato come stringhe\n        const topValue = this.draggedElement.style.top;\n        const leftValue = this.draggedElement.style.left;\n        // Rimuovi \"px\" dai valori e converti in numeri\n        const topNumeric = parseInt(topValue, 10);\n        const leftNumeric = parseInt(leftValue, 10);\n        const coordinates = {\n          name: this.draggedElement.id,\n          x: topNumeric,\n          y: leftNumeric\n        };\n        // Invia le coordinate al backend tramite una chiamata API\n        this.saveCoordinates(coordinates);\n        this.draggedElement = null;\n      }\n    }\n    onDragStart(event) {\n      this.isDragging = true;\n      this.draggedElement = event.target;\n    }\n    saveCoordinates(coordinates) {\n      this.http.post(`${this.apiUrl}/api/SaveCoordinate`, coordinates).subscribe(response => {\n        console.log('Coordinate salvate:', coordinates);\n      }, error => {\n        console.error('Errore durante il salvataggio delle coordinate:', error);\n        // Puoi gestire l'errore qui, ad esempio, mostrare un messaggio all'utente o effettuare altre azioni\n      });\n    }\n\n    getCoordinatesByName(elementName) {\n      this.http.get(`${this.apiUrl}/GetCoordinate`).subscribe(response => {\n        const elements = response.elements;\n        const element = elements.find(e => e.name === elementName);\n        if (element) {\n          const elementname = element.name;\n          const elementTop = element.y; // Assumendo che Y sia la coordinata verticale\n          const elementLeft = element.x; // Assumendo che X sia la coordinata orizzontale\n          //const elementToPosition = this.draggableContainer.nativeElement.querySelector(`#${elementId}`);\n          //if (elementToPosition) {\n          //  elementToPosition.style.top = `${elementTop}px`;\n          //  elementToPosition.style.left = `${elementLeft}px`;\n          //}\n        }\n      });\n    }\n  }\n\n  DraggableElementComponent.ɵfac = function DraggableElementComponent_Factory(t) {\n    return new (t || DraggableElementComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  DraggableElementComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DraggableElementComponent,\n    selectors: [[\"app-draggable-element\"]],\n    hostBindings: function DraggableElementComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousemove\", function DraggableElementComponent_mousemove_HostBindingHandler($event) {\n          return ctx.onDrag($event);\n        }, false, i0.ɵɵresolveDocument)(\"mouseup\", function DraggableElementComponent_mouseup_HostBindingHandler($event) {\n          return ctx.onDragEnd($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"draggable-container\"], [\"id\", \"element1\", 1, \"draggable\", 3, \"mousedown\", \"mouseup\"], [\"id\", \"element2\", 1, \"draggable\", 3, \"mousedown\", \"mouseup\"], [\"id\", \"element3\", 1, \"draggable\", 3, \"mousedown\", \"mouseup\"]],\n    template: function DraggableElementComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵlistener(\"mousedown\", function DraggableElementComponent_Template_div_mousedown_1_listener($event) {\n          return ctx.onDragStart($event);\n        })(\"mouseup\", function DraggableElementComponent_Template_div_mouseup_1_listener($event) {\n          return ctx.onDragEnd($event);\n        });\n        i0.ɵɵtext(2, \"Elemento 1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵlistener(\"mousedown\", function DraggableElementComponent_Template_div_mousedown_3_listener($event) {\n          return ctx.onDragStart($event);\n        })(\"mouseup\", function DraggableElementComponent_Template_div_mouseup_3_listener($event) {\n          return ctx.onDragEnd($event);\n        });\n        i0.ɵɵtext(4, \"Elemento 2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵlistener(\"mousedown\", function DraggableElementComponent_Template_div_mousedown_5_listener($event) {\n          return ctx.onDragStart($event);\n        })(\"mouseup\", function DraggableElementComponent_Template_div_mouseup_5_listener($event) {\n          return ctx.onDragEnd($event);\n        });\n        i0.ɵɵtext(6, \"Elemento 3\");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\".draggable-element[_ngcontent-%COMP%]{width:100px;height:100px;background-color:gray;color:#fff;position:absolute;-webkit-user-select:none;user-select:none;cursor:grab}.draggable-element[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{text-align:center;line-height:100px;margin:0;cursor:grab}.draggable-container[_ngcontent-%COMP%]{position:relative}.draggable[_ngcontent-%COMP%]{position:absolute;background-color:#3498db;color:#fff;padding:10px;cursor:pointer}.dragging[_ngcontent-%COMP%]{cursor:grabbing}\"]\n  });\n  return DraggableElementComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}