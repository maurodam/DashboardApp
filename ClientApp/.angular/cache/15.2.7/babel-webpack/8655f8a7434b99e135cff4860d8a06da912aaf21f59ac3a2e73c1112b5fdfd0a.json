{"ast":null,"code":"//import { Component } from '@angular/core';\n//import { CdkDragStart, CdkDragEnd } from '@angular/cdk/drag-drop';\n//import { ApiService } from '../../services/draggable-element.service';\nimport { __decorate } from \"tslib\";\n//@Component({\n//  selector: 'app-draggable-element',\n//  templateUrl: './draggable-element.component.html',\n//  styleUrls: ['./draggable-element.component.css'],\n//})\n//export class DraggableElementComponent {\n//  constructor(private apiService: ApiService) { }\n//  onDragStarted(event: CdkDragStart): void {\n//    // Invia le coordinate iniziali al backend quando inizia il trascinamento\n//    const element = event.source.element.nativeElement;\n//    this.sendCoordinates(element);\n//  }\n//  onDragEnded(event: CdkDragEnd): void {\n//    // Invia le coordinate finali al backend quando termina il trascinamento\n//    const element = event.source.element.nativeElement;\n//    this.sendCoordinates(element);\n//  }\n//  private sendCoordinates(element: HTMLElement): void {\n//    const coordinates = {\n//      top: element.style.top,\n//      left: element.style.left,\n//    };\n//    // Invia le coordinate al backend tramite un servizio API\n//    this.apiService.saveCoordinates(coordinates).subscribe((response) => {\n//      console.log('Coordinate salvate:', coordinates);\n//    });\n//  }\n//}\nimport { Component, HostListener } from '@angular/core';\nlet DraggableElementsComponent = class DraggableElementsComponent {\n  constructor() {\n    this.isDragging = false;\n    this.offsetX = 0;\n    this.offsetY = 0;\n  }\n  onDrag(event) {\n    if (this.isDragging) {\n      const element = document.querySelector('.dragging');\n      if (element) {\n        element.style.left = event.clientX - this.offsetX + 'px';\n        element.style.top = event.clientY - this.offsetY + 'px';\n      }\n    }\n  }\n  onDragEnd(event) {\n    if (this.isDragging) {\n      const element = document.querySelector('.dragging');\n      if (element) {\n        // Salvare le coordinate nel backend tramite chiamata API\n        const coordinates = {\n          top: element.style.top,\n          left: element.style.left\n        };\n        console.log('Coordinate salvate:', coordinates);\n      }\n      this.isDragging = false;\n    }\n  }\n  onDragStart(event) {\n    this.isDragging = true;\n    const target = event.target;\n    this.offsetX = event.clientX - target.getBoundingClientRect().left;\n    this.offsetY = event.clientY - target.getBoundingClientRect().top;\n    target.classList.add('dragging');\n  }\n};\n__decorate([HostListener('document:mousemove', ['$event'])], DraggableElementsComponent.prototype, \"onDrag\", null);\n__decorate([HostListener('document:mouseup', ['$event'])], DraggableElementsComponent.prototype, \"onDragEnd\", null);\nDraggableElementsComponent = __decorate([Component({\n  selector: 'app-draggable-elements',\n  templateUrl: './draggable-elements.component.html',\n  styleUrls: ['./draggable-elements.component.css']\n})], DraggableElementsComponent);\nexport { DraggableElementsComponent };","map":{"version":3,"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAS,EAAEC,YAAY,QAAQ,eAAe;AAOhD,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAAhCC;IACL,eAAU,GAAG,KAAK;IAClB,YAAO,GAAG,CAAC;IACX,YAAO,GAAG,CAAC;EAoCb;EAjCEC,MAAM,CAACC,KAAiB;IACtB,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC;MACnD,IAAIF,OAAO,EAAE;QACXA,OAAO,CAACG,KAAK,CAACC,IAAI,GAAIN,KAAK,CAACO,OAAO,GAAG,IAAI,CAACC,OAAO,GAAI,IAAI;QAC1DN,OAAO,CAACG,KAAK,CAACI,GAAG,GAAIT,KAAK,CAACU,OAAO,GAAG,IAAI,CAACC,OAAO,GAAI,IAAI;;;EAG/D;EAGAC,SAAS,CAACZ,KAAiB;IACzB,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC;MACnD,IAAIF,OAAO,EAAE;QACX;QACA,MAAMW,WAAW,GAAG;UAClBJ,GAAG,EAAEP,OAAO,CAACG,KAAK,CAACI,GAAG;UACtBH,IAAI,EAAEJ,OAAO,CAACG,KAAK,CAACC;SACrB;QACDQ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,WAAW,CAAC;;MAEjD,IAAI,CAACZ,UAAU,GAAG,KAAK;;EAE3B;EAEAe,WAAW,CAAChB,KAAiB;IAC3B,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,MAAMgB,MAAM,GAAGjB,KAAK,CAACiB,MAAqB;IAC1C,IAAI,CAACT,OAAO,GAAGR,KAAK,CAACO,OAAO,GAAGU,MAAM,CAACC,qBAAqB,EAAE,CAACZ,IAAI;IAClE,IAAI,CAACK,OAAO,GAAGX,KAAK,CAACU,OAAO,GAAGO,MAAM,CAACC,qBAAqB,EAAE,CAACT,GAAG;IACjEQ,MAAM,CAACE,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;EAClC;CACD;AAjCCC,YADCzB,YAAY,CAAC,oBAAoB,EAAE,CAAC,QAAQ,CAAC,CAAC,wDAS9C;AAGDyB,YADCzB,YAAY,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,CAAC,2DAc5C;AA9BUC,0BAA0B,eALtCF,SAAS,CAAC;EACT2B,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACW3B,0BAA0B,CAuCtC;SAvCYA,0BAA0B","names":["Component","HostListener","DraggableElementsComponent","constructor","onDrag","event","isDragging","element","document","querySelector","style","left","clientX","offsetX","top","clientY","offsetY","onDragEnd","coordinates","console","log","onDragStart","target","getBoundingClientRect","classList","add","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.ts"],"sourcesContent":["//import { Component } from '@angular/core';\r\n//import { CdkDragStart, CdkDragEnd } from '@angular/cdk/drag-drop';\r\n//import { ApiService } from '../../services/draggable-element.service';\r\n\r\n//@Component({\r\n//  selector: 'app-draggable-element',\r\n//  templateUrl: './draggable-element.component.html',\r\n//  styleUrls: ['./draggable-element.component.css'],\r\n//})\r\n//export class DraggableElementComponent {\r\n//  constructor(private apiService: ApiService) { }\r\n\r\n//  onDragStarted(event: CdkDragStart): void {\r\n//    // Invia le coordinate iniziali al backend quando inizia il trascinamento\r\n//    const element = event.source.element.nativeElement;\r\n//    this.sendCoordinates(element);\r\n//  }\r\n\r\n//  onDragEnded(event: CdkDragEnd): void {\r\n//    // Invia le coordinate finali al backend quando termina il trascinamento\r\n//    const element = event.source.element.nativeElement;\r\n//    this.sendCoordinates(element);\r\n//  }\r\n\r\n//  private sendCoordinates(element: HTMLElement): void {\r\n//    const coordinates = {\r\n//      top: element.style.top,\r\n//      left: element.style.left,\r\n//    };\r\n\r\n//    // Invia le coordinate al backend tramite un servizio API\r\n//    this.apiService.saveCoordinates(coordinates).subscribe((response) => {\r\n//      console.log('Coordinate salvate:', coordinates);\r\n//    });\r\n//  }\r\n//}\r\n\r\nimport { Component, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-draggable-elements',\r\n  templateUrl: './draggable-elements.component.html',\r\n  styleUrls: ['./draggable-elements.component.css',\r\n})\r\nexport class DraggableElementsComponent {\r\n  isDragging = false;\r\n  offsetX = 0;\r\n  offsetY = 0;\r\n\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDrag(event: MouseEvent): void {\r\n    if (this.isDragging) {\r\n      const element = document.querySelector('.dragging');\r\n      if (element) {\r\n        element.style.left = (event.clientX - this.offsetX) + 'px';\r\n        element.style.top = (event.clientY - this.offsetY) + 'px';\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onDragEnd(event: MouseEvent): void {\r\n    if (this.isDragging) {\r\n      const element = document.querySelector('.dragging');\r\n      if (element) {\r\n        // Salvare le coordinate nel backend tramite chiamata API\r\n        const coordinates = {\r\n          top: element.style.top,\r\n          left: element.style.left,\r\n        };\r\n        console.log('Coordinate salvate:', coordinates);\r\n      }\r\n      this.isDragging = false;\r\n    }\r\n  }\r\n\r\n  onDragStart(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    const target = event.target as HTMLElement;\r\n    this.offsetX = event.clientX - target.getBoundingClientRect().left;\r\n    this.offsetY = event.clientY - target.getBoundingClientRect().top;\r\n    target.classList.add('dragging');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}