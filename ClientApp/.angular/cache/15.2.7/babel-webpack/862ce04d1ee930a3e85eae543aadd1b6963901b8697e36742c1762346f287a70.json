{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction DraggableElementComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"mousedown\", function DraggableElementComponent_div_1_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDragStart($event));\n    })(\"mouseup\", function DraggableElementComponent_div_1_Template_div_mouseup_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onDragEnd($event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"id\", element_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(element_r1.name);\n  }\n}\nexport class DraggableElementComponent {\n  constructor(http) {\n    this.http = http;\n    this.isDragging = false;\n    this.draggedElement = null;\n    this.apiUrl = 'https://localhost:7164';\n    this.elements = [];\n  }\n  ngOnInit() {\n    this.getElements();\n    if (this.elements.length > 0) {\n      const observables = this.elements.map(element => {\n        return this.yourService.getCoordinatesByName(element.name);\n      });\n      forkJoin(observables).subscribe(coordinates => {\n        // Qui puoi gestire le coordinate se necessario\n        console.log('Coordinate ricevute:', coordinates);\n      });\n    }\n    console.log('getElements', this.elements);\n  }\n  onDrag(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.draggedElement.style.top = event.clientY + 'px';\n      this.draggedElement.style.left = event.clientX + 'px';\n    }\n  }\n  onDragEnd(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.isDragging = false;\n      // Ottengo le coordinate dell'elemento trascinato come stringhe\n      const topValue = this.draggedElement.style.top;\n      const leftValue = this.draggedElement.style.left;\n      // Rimuovo \"px\" dai valori e converto in int per salvare su db\n      const topNumeric = parseInt(topValue, 10);\n      const leftNumeric = parseInt(leftValue, 10);\n      const coordinates = {\n        name: this.draggedElement.id,\n        x: leftNumeric,\n        y: topNumeric\n      };\n      this.saveCoordinates(coordinates);\n      this.draggedElement = null;\n    }\n  }\n  onDragStart(event) {\n    this.isDragging = true;\n    this.draggedElement = event.target;\n  }\n  saveCoordinates(coordinates) {\n    this.http.post(`${this.apiUrl}/api/SaveCoordinate`, coordinates).subscribe(response => {\n      console.log('Coordinate salvate:', coordinates);\n    }, error => {\n      console.error('Errore durante il salvataggio delle coordinate:', error);\n    });\n  }\n  getCoordinatesByName(elementName) {\n    this.http.get(`${this.apiUrl}/api/GetCoordinate?elementName=${elementName}`).subscribe(response => {\n      const element = response;\n      if (element) {\n        const name = element.name;\n        const elementTop = element.y;\n        const elementLeft = element.x;\n        console.log('Coordinate salvate:', name, 'top y' + elementTop, 'left x' + elementLeft);\n        const elementToPosition = document.getElementById(name);\n        if (elementToPosition) {\n          elementToPosition.style.top = `${elementTop}px`;\n          elementToPosition.style.left = `${elementLeft}px`;\n        }\n      }\n    });\n  }\n  getElements() {\n    this.http.get(`${this.apiUrl}/api/GetElements`).subscribe(response => {\n      const elements = response;\n      if (elements) {\n        elements.forEach(element => {\n          this.elements.push(element);\n        });\n      }\n    });\n  }\n}\nDraggableElementComponent.ɵfac = function DraggableElementComponent_Factory(t) {\n  return new (t || DraggableElementComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nDraggableElementComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DraggableElementComponent,\n  selectors: [[\"app-draggable-element\"]],\n  hostBindings: function DraggableElementComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousemove\", function DraggableElementComponent_mousemove_HostBindingHandler($event) {\n        return ctx.onDrag($event);\n      }, false, i0.ɵɵresolveDocument)(\"mouseup\", function DraggableElementComponent_mouseup_HostBindingHandler($event) {\n        return ctx.onDragEnd($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"draggable-container\"], [\"class\", \"draggable\", 3, \"id\", \"mousedown\", \"mouseup\", 4, \"ngFor\", \"ngForOf\"], [1, \"draggable\", 3, \"id\", \"mousedown\", \"mouseup\"]],\n  template: function DraggableElementComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, DraggableElementComponent_div_1_Template, 2, 2, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.elements);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\".draggable-element[_ngcontent-%COMP%] {\\r\\n  width: 100px;\\r\\n  height: 100px;\\r\\n  background-color: gray;\\r\\n  color: white;\\r\\n  position: absolute;\\r\\n  -webkit-user-select: none;\\r\\n          user-select: none;\\r\\n  cursor: grab;\\r\\n  transition: transform 0.3s ease;\\r\\n}\\r\\n\\r\\n.draggable-container[_ngcontent-%COMP%] {\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.draggable[_ngcontent-%COMP%] {\\r\\n  position: absolute;\\r\\n  background-color: #3498db;\\r\\n  color: #ffffff;\\r\\n  padding: 10px;\\r\\n  cursor: grab;\\r\\n}\\r\\n\\r\\n.dragging[_ngcontent-%COMP%] {\\r\\n  cursor: grabbing;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kcmFnZ2FibGUtZWxlbWVudC9kcmFnZ2FibGUtZWxlbWVudC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWTtFQUNaLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQix5QkFBaUI7VUFBakIsaUJBQWlCO0VBQ2pCLFlBQVk7RUFDWiwrQkFBK0I7QUFDakM7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIseUJBQXlCO0VBQ3pCLGNBQWM7RUFDZCxhQUFhO0VBQ2IsWUFBWTtBQUNkOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiLmRyYWdnYWJsZS1lbGVtZW50IHtcclxuICB3aWR0aDogMTAwcHg7XHJcbiAgaGVpZ2h0OiAxMDBweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgY3Vyc29yOiBncmFiO1xyXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2U7XHJcbn1cclxuXHJcbi5kcmFnZ2FibGUtY29udGFpbmVyIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi5kcmFnZ2FibGUge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQ5OGRiO1xyXG4gIGNvbG9yOiAjZmZmZmZmO1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgY3Vyc29yOiBncmFiO1xyXG59XHJcblxyXG4uZHJhZ2dpbmcge1xyXG4gIGN1cnNvcjogZ3JhYmJpbmc7XHJcbn1cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","DraggableElementComponent","constructor","http","ngOnInit","getElements","elements","length","observables","map","element","yourService","getCoordinatesByName","name","forkJoin","subscribe","coordinates","console","log","onDrag","event","isDragging","draggedElement","style","top","clientY","left","clientX","onDragEnd","topValue","leftValue","topNumeric","parseInt","leftNumeric","id","x","y","saveCoordinates","onDragStart","target","post","apiUrl","response","error","elementName","get","elementTop","elementLeft","elementToPosition","document","getElementById","forEach","push","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.html","C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.ts"],"sourcesContent":["<div class=\"draggable-container\">\r\n  <div class=\"draggable\"\r\n       *ngFor=\"let element of elements\"\r\n       [id]=\"element.name\"\r\n       (mousedown)=\"onDragStart($event)\"\r\n       (mouseup)=\"onDragEnd($event)\">{{ element.name }}</div>\r\n</div>\r\n","import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DraggableElement } from '../../models/draggable-element.model';\r\nimport { Elements } from '../../models/elements.model';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'app-draggable-element',\r\n  templateUrl: './draggable-element.component.html',\r\n  styleUrls: ['./draggable-element.component.css'],\r\n})\r\n\r\nexport class DraggableElementComponent implements OnInit {\r\n\r\n  private isDragging = false;\r\n  private draggedElement: HTMLElement | null = null;\r\n  private apiUrl = 'https://localhost:7164';\r\n\r\n  public elements: Elements[] = [];\r\n\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getElements();\r\n\r\n    if (this.elements.length > 0) {\r\n      const observables = this.elements.map((element: Elements) => {\r\n        return this.yourService.getCoordinatesByName(element.name);\r\n      });\r\n\r\n      forkJoin(observables).subscribe(coordinates => {\r\n        // Qui puoi gestire le coordinate se necessario\r\n        console.log('Coordinate ricevute:', coordinates);\r\n      });\r\n    }\r\n\r\n    console.log('getElements', this.elements);\r\n\r\n  }\r\n\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDrag(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.draggedElement.style.top = event.clientY + 'px';\r\n      this.draggedElement.style.left = event.clientX + 'px';\r\n    }\r\n  }\r\n\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onDragEnd(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.isDragging = false;\r\n\r\n      // Ottengo le coordinate dell'elemento trascinato come stringhe\r\n      const topValue = this.draggedElement.style.top;\r\n      const leftValue = this.draggedElement.style.left;\r\n\r\n      // Rimuovo \"px\" dai valori e converto in int per salvare su db\r\n      const topNumeric = parseInt(topValue, 10);\r\n      const leftNumeric = parseInt(leftValue, 10);\r\n\r\n      const coordinates = {\r\n        name: this.draggedElement.id,\r\n        x: leftNumeric,\r\n        y: topNumeric,\r\n      };\r\n\r\n      this.saveCoordinates(coordinates);\r\n\r\n      this.draggedElement = null;\r\n    }\r\n  }\r\n\r\n  onDragStart(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    this.draggedElement = event.target as HTMLElement;\r\n  }\r\n\r\n  private saveCoordinates(coordinates: any): void {\r\n    this.http.post(`${this.apiUrl}/api/SaveCoordinate`, coordinates)\r\n      .subscribe(\r\n        (response) => {\r\n          console.log('Coordinate salvate:', coordinates);\r\n        },\r\n        (error) => {\r\n          console.error('Errore durante il salvataggio delle coordinate:', error);\r\n        }\r\n      );\r\n  }\r\n\r\n  private getCoordinatesByName(elementName: string): void {\r\n    this.http.get<any>(`${this.apiUrl}/api/GetCoordinate?elementName=${elementName}`)\r\n      .subscribe((response: any) => {\r\n        const element: DraggableElement = response;\r\n\r\n        if (element) {\r\n          const name = element.name;\r\n          const elementTop = element.y;\r\n          const elementLeft = element.x;\r\n\r\n          console.log('Coordinate salvate:', name, 'top y' + elementTop, 'left x' + elementLeft);\r\n\r\n          const elementToPosition = document.getElementById(name) as HTMLElement;\r\n\r\n          if (elementToPosition) {\r\n            elementToPosition.style.top = `${elementTop}px`;\r\n            elementToPosition.style.left = `${elementLeft}px`;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private getElements(): void {\r\n    this.http.get<any>(`${this.apiUrl}/api/GetElements`).subscribe((response: any) => {\r\n      const elements: Elements[] = response;\r\n\r\n      if (elements) {\r\n        elements.forEach((element: Elements) => {\r\n          this.elements.push(element);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}