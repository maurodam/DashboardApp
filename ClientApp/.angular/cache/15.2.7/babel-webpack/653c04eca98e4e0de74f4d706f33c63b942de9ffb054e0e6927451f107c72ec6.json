{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HostListener } from '@angular/core';\n// Sostituisci con l'URL del tuo backend API\nconst apiUrl = 'https://localhost:7164';\nexport class DraggableElementComponent {\n  constructor(http) {\n    this.http = http;\n    this.isDragging = false;\n    this.draggedElement = null;\n  }\n  onDrag(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.draggedElement.style.left = event.clientX + 'px';\n      this.draggedElement.style.top = event.clientY + 'px';\n    }\n  }\n  onDragEnd(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.isDragging = false;\n      // Ottieni le coordinate dell'elemento trascinato come stringhe\n      const topValue = this.draggedElement.style.top;\n      const leftValue = this.draggedElement.style.left;\n      // Rimuovi \"px\" dai valori e converti in numeri\n      const topNumeric = parseInt(topValue, 10);\n      const leftNumeric = parseInt(leftValue, 10);\n      const coordinates = {\n        name: this.draggedElement.id,\n        x: topNumeric,\n        y: leftNumeric\n      };\n      // Invia le coordinate al backend tramite una chiamata API\n      this.saveCoordinates(coordinates);\n      this.draggedElement = null;\n    }\n  }\n  onDragStart(event) {\n    this.isDragging = true;\n    this.draggedElement = event.target;\n  }\n  saveCoordinates(coordinates) {\n    this.http.post(`${apiUrl}/api/SaveCoordinate`, coordinates).subscribe(response => {\n      console.log('Coordinate salvate:', coordinates);\n    }, error => {\n      console.error('Errore durante il salvataggio delle coordinate:', error);\n      // Puoi gestire l'errore qui, ad esempio, mostrare un messaggio all'utente o effettuare altre azioni\n    });\n  }\n\n  getCoordinates() {\n    this.http.get(`${apiUrl}/GetCoordinate`).subscribe(elements => {\n      if (elements && elements.length > 0) {\n        elements.forEach(element => {\n          const elementName = element.name;\n          const elementTop = element.top;\n          const elementLeft = element.left;\n          const elementToPosition = this.draggableContainer.nativeElement.querySelector(`#${elementId}`);\n          if (elementToPosition) {\n            elementToPosition.style.top = `${elementTop}px`;\n            elementToPosition.style.left = `${elementLeft}px`;\n          }\n        });\n      }\n    });\n  }\n}\n__decorate([HostListener('document:mousemove', ['$event'])], DraggableElementComponent.prototype, \"onDrag\", null);\n__decorate([HostListener('document:mouseup', ['$event'])], DraggableElementComponent.prototype, \"onDragEnd\", null);","map":{"version":3,"mappings":"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","names":["HostListener","apiUrl","DraggableElementComponent","constructor","http","onDrag","event","isDragging","draggedElement","style","left","clientX","top","clientY","onDragEnd","topValue","leftValue","topNumeric","parseInt","leftNumeric","coordinates","name","id","x","y","saveCoordinates","onDragStart","target","post","subscribe","response","console","log","error","getCoordinates","get","elements","length","forEach","element","elementName","elementTop","elementLeft","elementToPosition","draggableContainer","nativeElement","querySelector","elementId","__decorate"],"sourceRoot":"","sources":["C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.ts"],"sourcesContent":["import { Component, HostListener } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-draggable-element',\r\n  templateUrl: './draggable-element.component.html',\r\n  styleUrls: ['./draggable-element.component.css'],\r\n})\r\n\r\n// Sostituisci con l'URL del tuo backend API\r\nconst apiUrl = 'https://localhost:7164';\r\n\r\nexport class DraggableElementComponent {\r\n  private isDragging = false;\r\n  private draggedElement: HTMLElement | null = null;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDrag(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.draggedElement.style.left = event.clientX + 'px';\r\n      this.draggedElement.style.top = event.clientY + 'px';\r\n    }\r\n  }\r\n\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onDragEnd(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.isDragging = false;\r\n\r\n      // Ottieni le coordinate dell'elemento trascinato come stringhe\r\n      const topValue = this.draggedElement.style.top;\r\n      const leftValue = this.draggedElement.style.left;\r\n\r\n      // Rimuovi \"px\" dai valori e converti in numeri\r\n      const topNumeric = parseInt(topValue, 10);\r\n      const leftNumeric = parseInt(leftValue, 10);\r\n\r\n      const coordinates = {\r\n        name: this.draggedElement.id,\r\n        x: topNumeric,\r\n        y: leftNumeric,\r\n      };\r\n\r\n      // Invia le coordinate al backend tramite una chiamata API\r\n      this.saveCoordinates(coordinates);\r\n\r\n      this.draggedElement = null;\r\n    }\r\n  }\r\n\r\n\r\n  onDragStart(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    this.draggedElement = event.target as HTMLElement;\r\n  }\r\n\r\n  private saveCoordinates(coordinates: any): void {\r\n\r\n\r\n    this.http.post(`${apiUrl}/api/SaveCoordinate`, coordinates)\r\n      .subscribe(\r\n        (response) => {\r\n          console.log('Coordinate salvate:', coordinates);\r\n        },\r\n        (error) => {\r\n          console.error('Errore durante il salvataggio delle coordinate:', error);\r\n          // Puoi gestire l'errore qui, ad esempio, mostrare un messaggio all'utente o effettuare altre azioni\r\n        }\r\n      );\r\n  }\r\n\r\n  private getCoordinates(): void {\r\n    this.http.get(`${apiUrl}/GetCoordinate`)\r\n      .subscribe((elements: any) => {\r\n        if (elements && elements.length > 0) {\r\n          elements.forEach((element) => {\r\n            const elementName = element.name;\r\n            const elementTop = element.top;\r\n            const elementLeft = element.left;\r\n\r\n            const elementToPosition = this.draggableContainer.nativeElement.querySelector(`#${elementId}`);\r\n            if (elementToPosition) {\r\n              elementToPosition.style.top = `${elementTop}px`;\r\n              elementToPosition.style.left = `${elementLeft}px`;\r\n            }\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}