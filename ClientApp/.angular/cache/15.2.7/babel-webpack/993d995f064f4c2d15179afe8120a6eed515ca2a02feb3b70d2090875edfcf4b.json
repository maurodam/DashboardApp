{"ast":null,"code":"//import { Component, ElementRef, HostListener } from '@angular/core';\n//import { DraggableElement } from '../../models/draggable-element.model';\nimport { __decorate } from \"tslib\";\n//@Component({\n//  selector: 'app-draggable-element',\n//  templateUrl: './draggable-element.component.html',\n//  styleUrls: ['./draggable-element.component.css']\n//})\n//export class DraggableElementComponent {\n//  private isDragging = false;\n//  private initialX: any;\n//  private initialY: any;\n//  draggableElement: DraggableElement[] = [];\n//  constructor(private elementRef: ElementRef) { }\n//  ngOnInit(): void {\n//    this.draggableElement.push();\n//  }\n//  @HostListener('window:mousemove', ['$event'])\n//  onDrag(event: MouseEvent): void {\n//    if (this.isDragging) {\n//      const x = event.clientX - this.initialX;\n//      const y = event.clientY - this.initialY;\n//      this.elementRef.nativeElement.style.transform = `translate(${x}px, ${y}px)`;\n//    }\n//  }\n//  @HostListener('mousedown', ['$event'])\n//  onDragStart(event: MouseEvent): void {\n//    this.isDragging = true;\n//    this.initialX = event.clientX - this.elementRef.nativeElement.getBoundingClientRect().left;\n//    this.initialY = event.clientY - this.elementRef.nativeElement.getBoundingClientRect().top;\n//  }\n//  @HostListener('window:mouseup')\n//  onDragEnd(): void {\n//    if (this.isDragging) {\n//      this.isDragging = false;\n//      const element = this.elementRef.nativeElement;\n//      const x = element.getBoundingClientRect().left;\n//      const y = element.getBoundingClientRect().top;\n//      // Ora puoi salvare le coordinate (x, y) nel tuo database o in una variabile\n//      // e inviare i dati al server se necessario.\n//    }\n//  }\n//}\nimport { Component } from '@angular/core';\nlet DraggableElementsComponent = class DraggableElementsComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  onDragStarted(event) {\n    // Invia le coordinate iniziali al backend quando inizia il trascinamento\n    const element = event.source.element.nativeElement;\n    this.sendCoordinates(element);\n  }\n  onDragEnded(event) {\n    // Invia le coordinate finali al backend quando termina il trascinamento\n    const element = event.source.element.nativeElement;\n    this.sendCoordinates(element);\n  }\n  sendCoordinates(element) {\n    const coordinates = {\n      top: element.style.top,\n      left: element.style.left\n    };\n    // Invia le coordinate al backend tramite un servizio API\n    this.apiService.saveCoordinates(coordinates).subscribe(response => {\n      console.log('Coordinate salvate:', coordinates);\n    });\n  }\n};\nDraggableElementsComponent = __decorate([Component({\n  selector: 'app-draggable-elements',\n  templateUrl: './draggable-elements.component.html',\n  styleUrls: ['./draggable-elements.component.css']\n})], DraggableElementsComponent);\nexport { DraggableElementsComponent };","map":{"version":3,"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA,SAASA,SAAS,QAAQ,eAAe;AASlC,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EACrCC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAgB;EAE9CC,aAAa,CAACC,KAAmB;IAC/B;IACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACD,OAAO,CAACE,aAAa;IAClD,IAAI,CAACC,eAAe,CAACH,OAAO,CAAC;EAC/B;EAEAI,WAAW,CAACL,KAAiB;IAC3B;IACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACD,OAAO,CAACE,aAAa;IAClD,IAAI,CAACC,eAAe,CAACH,OAAO,CAAC;EAC/B;EAEQG,eAAe,CAACH,OAAoB;IAC1C,MAAMK,WAAW,GAAG;MAClBC,GAAG,EAAEN,OAAO,CAACO,KAAK,CAACD,GAAG;MACtBE,IAAI,EAAER,OAAO,CAACO,KAAK,CAACC;KACrB;IAED;IACA,IAAI,CAACX,UAAU,CAACY,eAAe,CAACJ,WAAW,CAAC,CAACK,SAAS,CAAEC,QAAQ,IAAI;MAClEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAER,WAAW,CAAC;IACjD,CAAC,CAAC;EACJ;CACD;AA1BYV,0BAA0B,eALtCD,SAAS,CAAC;EACToB,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACWrB,0BAA0B,CA0BtC;SA1BYA,0BAA0B","names":["Component","DraggableElementsComponent","constructor","apiService","onDragStarted","event","element","source","nativeElement","sendCoordinates","onDragEnded","coordinates","top","style","left","saveCoordinates","subscribe","response","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.ts"],"sourcesContent":["//import { Component, ElementRef, HostListener } from '@angular/core';\r\n//import { DraggableElement } from '../../models/draggable-element.model';\r\n\r\n//@Component({\r\n//  selector: 'app-draggable-element',\r\n//  templateUrl: './draggable-element.component.html',\r\n//  styleUrls: ['./draggable-element.component.css']\r\n//})\r\n\r\n//export class DraggableElementComponent {\r\n//  private isDragging = false;\r\n//  private initialX: any;\r\n//  private initialY: any;\r\n\r\n//  draggableElement: DraggableElement[] = [];\r\n\r\n//  constructor(private elementRef: ElementRef) { }\r\n\r\n//  ngOnInit(): void {\r\n//    this.draggableElement.push();\r\n//  }\r\n\r\n//  @HostListener('window:mousemove', ['$event'])\r\n//  onDrag(event: MouseEvent): void {\r\n//    if (this.isDragging) {\r\n//      const x = event.clientX - this.initialX;\r\n//      const y = event.clientY - this.initialY;\r\n//      this.elementRef.nativeElement.style.transform = `translate(${x}px, ${y}px)`;\r\n//    }\r\n//  }\r\n\r\n//  @HostListener('mousedown', ['$event'])\r\n//  onDragStart(event: MouseEvent): void {\r\n//    this.isDragging = true;\r\n//    this.initialX = event.clientX - this.elementRef.nativeElement.getBoundingClientRect().left;\r\n//    this.initialY = event.clientY - this.elementRef.nativeElement.getBoundingClientRect().top;\r\n//  }\r\n\r\n//  @HostListener('window:mouseup')\r\n//  onDragEnd(): void {\r\n//    if (this.isDragging) {\r\n//      this.isDragging = false;\r\n//      const element = this.elementRef.nativeElement;\r\n//      const x = element.getBoundingClientRect().left;\r\n//      const y = element.getBoundingClientRect().top;\r\n\r\n//      // Ora puoi salvare le coordinate (x, y) nel tuo database o in una variabile\r\n//      // e inviare i dati al server se necessario.\r\n//    }\r\n//  }\r\n//}\r\n\r\n\r\nimport { Component } from '@angular/core';\r\nimport { CdkDragStart, CdkDragEnd } from '@angular/cdk/drag-drop';\r\nimport { ApiService } from './api.service';\r\n\r\n@Component({\r\n  selector: 'app-draggable-elements',\r\n  templateUrl: './draggable-elements.component.html',\r\n  styleUrls: ['./draggable-elements.component.css'],\r\n})\r\nexport class DraggableElementsComponent {\r\n  constructor(private apiService: ApiService) { }\r\n\r\n  onDragStarted(event: CdkDragStart): void {\r\n    // Invia le coordinate iniziali al backend quando inizia il trascinamento\r\n    const element = event.source.element.nativeElement;\r\n    this.sendCoordinates(element);\r\n  }\r\n\r\n  onDragEnded(event: CdkDragEnd): void {\r\n    // Invia le coordinate finali al backend quando termina il trascinamento\r\n    const element = event.source.element.nativeElement;\r\n    this.sendCoordinates(element);\r\n  }\r\n\r\n  private sendCoordinates(element: HTMLElement): void {\r\n    const coordinates = {\r\n      top: element.style.top,\r\n      left: element.style.left,\r\n    };\r\n\r\n    // Invia le coordinate al backend tramite un servizio API\r\n    this.apiService.saveCoordinates(coordinates).subscribe((response) => {\r\n      console.log('Coordinate salvate:', coordinates);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}