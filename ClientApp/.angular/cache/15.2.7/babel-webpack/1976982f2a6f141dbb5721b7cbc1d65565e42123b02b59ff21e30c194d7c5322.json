{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nlet DraggableElementComponent = class DraggableElementComponent {\n  constructor(http) {\n    this.http = http;\n    this.isDragging = false;\n    this.draggedElement = null;\n  }\n  onDrag(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.draggedElement.style.left = event.clientX + 'px';\n      this.draggedElement.style.top = event.clientY + 'px';\n    }\n  }\n  onDragEnd(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.isDragging = false;\n      // Ottieni le coordinate dell'elemento trascinato\n      const coordinates = {\n        top: this.draggedElement.style.top,\n        left: this.draggedElement.style.left\n      };\n      // Invia le coordinate al backend tramite una chiamata API\n      this.saveCoordinates(coordinates);\n      this.draggedElement = null;\n    }\n  }\n  onDragStart(event) {\n    this.isDragging = true;\n    this.draggedElement = event.target;\n  }\n  saveCoordinates(coordinates) {\n    // Sostituisci con l'URL del tuo backend API\n    const apiUrl = 'https://localhost:44424/';\n    this.http.post(apiUrl, coordinates).subscribe(response => {\n      console.log('Coordinate salvate:', coordinates);\n    });\n  }\n};\n__decorate([HostListener('document:mousemove', ['$event'])], DraggableElementComponent.prototype, \"onDrag\", null);\n__decorate([HostListener('document:mouseup', ['$event'])], DraggableElementComponent.prototype, \"onDragEnd\", null);\nDraggableElementComponent = __decorate([Component({\n  selector: 'app-draggable-elements',\n  templateUrl: './draggable-elements.component.html',\n  styleUrls: ['./draggable-elements.component.css']\n})], DraggableElementComponent);\nexport { DraggableElementComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,QAAQ,eAAe;AAQhD,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAIpCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,eAAU,GAAG,KAAK;IAClB,mBAAc,GAAuB,IAAI;EAET;EAGxCC,MAAM,CAACC,KAAiB;IACtB,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,cAAc,EAAE;MAC1C,IAAI,CAACA,cAAc,CAACC,KAAK,CAACC,IAAI,GAAGJ,KAAK,CAACK,OAAO,GAAG,IAAI;MACrD,IAAI,CAACH,cAAc,CAACC,KAAK,CAACG,GAAG,GAAGN,KAAK,CAACO,OAAO,GAAG,IAAI;;EAExD;EAGAC,SAAS,CAACR,KAAiB;IACzB,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,cAAc,EAAE;MAC1C,IAAI,CAACD,UAAU,GAAG,KAAK;MAEvB;MACA,MAAMQ,WAAW,GAAG;QAClBH,GAAG,EAAE,IAAI,CAACJ,cAAc,CAACC,KAAK,CAACG,GAAG;QAClCF,IAAI,EAAE,IAAI,CAACF,cAAc,CAACC,KAAK,CAACC;OACjC;MAED;MACA,IAAI,CAACM,eAAe,CAACD,WAAW,CAAC;MAEjC,IAAI,CAACP,cAAc,GAAG,IAAI;;EAE9B;EAEAS,WAAW,CAACX,KAAiB;IAC3B,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,cAAc,GAAGF,KAAK,CAACY,MAAqB;EACnD;EAEQF,eAAe,CAACD,WAAgB;IACtC;IACA,MAAMI,MAAM,GAAG,0BAA0B;IAEzC,IAAI,CAACf,IAAI,CAACgB,IAAI,CAACD,MAAM,EAAEJ,WAAW,CAAC,CAACM,SAAS,CAAEC,QAAQ,IAAI;MACzDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAET,WAAW,CAAC;IACjD,CAAC,CAAC;EACJ;CACD;AAtCCU,YADCxB,YAAY,CAAC,oBAAoB,EAAE,CAAC,QAAQ,CAAC,CAAC,uDAM9C;AAGDwB,YADCxB,YAAY,CAAC,kBAAkB,EAAE,CAAC,QAAQ,CAAC,CAAC,0DAgB5C;AA9BUC,yBAAyB,eALrCF,SAAS,CAAC;EACT0B,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACW1B,yBAAyB,CA6CrC;SA7CYA,yBAAyB","names":["Component","HostListener","DraggableElementComponent","constructor","http","onDrag","event","isDragging","draggedElement","style","left","clientX","top","clientY","onDragEnd","coordinates","saveCoordinates","onDragStart","target","apiUrl","post","subscribe","response","console","log","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.ts"],"sourcesContent":["import { Component, HostListener } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-draggable-elements',\r\n  templateUrl: './draggable-elements.component.html',\r\n  styleUrls: ['./draggable-elements.component.css'],\r\n})\r\nexport class DraggableElementComponent {\r\n  private isDragging = false;\r\n  private draggedElement: HTMLElement | null = null;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDrag(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.draggedElement.style.left = event.clientX + 'px';\r\n      this.draggedElement.style.top = event.clientY + 'px';\r\n    }\r\n  }\r\n\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onDragEnd(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.isDragging = false;\r\n\r\n      // Ottieni le coordinate dell'elemento trascinato\r\n      const coordinates = {\r\n        top: this.draggedElement.style.top,\r\n        left: this.draggedElement.style.left,\r\n      };\r\n\r\n      // Invia le coordinate al backend tramite una chiamata API\r\n      this.saveCoordinates(coordinates);\r\n\r\n      this.draggedElement = null;\r\n    }\r\n  }\r\n\r\n  onDragStart(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    this.draggedElement = event.target as HTMLElement;\r\n  }\r\n\r\n  private saveCoordinates(coordinates: any): void {\r\n    // Sostituisci con l'URL del tuo backend API\r\n    const apiUrl = 'https://localhost:44424/';\r\n\r\n    this.http.post(apiUrl, coordinates).subscribe((response) => {\r\n      console.log('Coordinate salvate:', coordinates);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}