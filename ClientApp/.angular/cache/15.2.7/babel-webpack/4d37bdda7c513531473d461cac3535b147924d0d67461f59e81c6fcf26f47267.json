{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nlet DraggableElementComponent = class DraggableElementComponent {\n  constructor(http) {\n    this.http = http;\n    this.isDragging = false;\n    this.draggedElement = null;\n    this.apiUrl = 'https://localhost:7164';\n    this.elements = [];\n  }\n  ngOnInit() {\n    this.getElements();\n    this.elements.forEach(element => {\n      this.getCoordinatesByName(element.name);\n    });\n  }\n  onDrag(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.draggedElement.style.top = event.clientY + 'px';\n      this.draggedElement.style.left = event.clientX + 'px';\n    }\n  }\n  onDragEnd(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.isDragging = false;\n      // Ottengo le coordinate dell'elemento trascinato come stringhe\n      const topValue = this.draggedElement.style.top;\n      const leftValue = this.draggedElement.style.left;\n      // Rimuovo \"px\" dai valori e converto in int per salvare su db\n      const topNumeric = parseInt(topValue, 10);\n      const leftNumeric = parseInt(leftValue, 10);\n      const coordinates = {\n        name: this.draggedElement.id,\n        x: leftNumeric,\n        y: topNumeric\n      };\n      this.saveCoordinates(coordinates);\n      this.draggedElement = null;\n    }\n  }\n  onDragStart(event) {\n    this.isDragging = true;\n    this.draggedElement = event.target;\n  }\n  saveCoordinates(coordinates) {\n    this.http.post(`${this.apiUrl}/api/SaveCoordinate`, coordinates).subscribe(response => {\n      console.log('Coordinate salvate:', coordinates);\n    }, error => {\n      console.error('Errore durante il salvataggio delle coordinate:', error);\n    });\n  }\n  getCoordinatesByName(elementName) {\n    this.http.get(`${this.apiUrl}/api/GetCoordinate?elementName=${elementName}`).subscribe(response => {\n      const element = response;\n      if (element) {\n        const name = element.name;\n        const elementTop = element.y;\n        const elementLeft = element.x;\n        console.log('Coordinate salvate:', name, 'top y' + elementTop, 'left x' + elementLeft);\n        const elementToPosition = document.getElementById(name);\n        if (elementToPosition) {\n          elementToPosition.style.top = `${elementTop}px`;\n          elementToPosition.style.left = `${elementLeft}px`;\n        }\n      }\n    });\n  }\n  getElements() {\n    this.http.get(`${this.apiUrl}/api/GetElements`).subscribe(response => {\n      const elements = response;\n      if (elements) {\n        elements.forEach(element => {\n          this.elements.push(element);\n        });\n      }\n    });\n  }\n};\n__decorate([HostListener('document:mousemove', ['$event'])], DraggableElementComponent.prototype, \"onDrag\", null);\n__decorate([HostListener('document:mouseup', ['$event'])], DraggableElementComponent.prototype, \"onDragEnd\", null);\nDraggableElementComponent = __decorate([Component({\n  selector: 'app-draggable-element',\n  templateUrl: './draggable-element.component.html',\n  styleUrls: ['./draggable-element.component.css']\n})], DraggableElementComponent);\nexport { DraggableElementComponent };","map":{"version":3,"mappings":"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","names":["Component","HostListener","DraggableElementComponent","constructor","http","ngOnInit","getElements","elements","forEach","element","getCoordinatesByName","name","onDrag","event","isDragging","draggedElement","style","top","clientY","left","clientX","onDragEnd","topValue","leftValue","topNumeric","parseInt","leftNumeric","coordinates","id","x","y","saveCoordinates","onDragStart","target","post","apiUrl","subscribe","response","console","log","error","elementName","get","elementTop","elementLeft","elementToPosition","document","getElementById","push","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DraggableElement } from '../../models/draggable-element.model';\r\nimport { Elements } from '../../models/elements.model';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'app-draggable-element',\r\n  templateUrl: './draggable-element.component.html',\r\n  styleUrls: ['./draggable-element.component.css'],\r\n})\r\n\r\nexport class DraggableElementComponent implements OnInit {\r\n\r\n  private isDragging = false;\r\n  private draggedElement: HTMLElement | null = null;\r\n  private apiUrl = 'https://localhost:7164';\r\n\r\n  private elements: Elements[] = [];\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getElements();\r\n\r\n    this.elements.forEach((element: Elements) => {\r\n      this.getCoordinatesByName(element.name);\r\n    });\r\n  }\r\n\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDrag(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.draggedElement.style.top = event.clientY + 'px';\r\n      this.draggedElement.style.left = event.clientX + 'px';\r\n    }\r\n  }\r\n\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onDragEnd(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.isDragging = false;\r\n\r\n      // Ottengo le coordinate dell'elemento trascinato come stringhe\r\n      const topValue = this.draggedElement.style.top;\r\n      const leftValue = this.draggedElement.style.left;\r\n\r\n      // Rimuovo \"px\" dai valori e converto in int per salvare su db\r\n      const topNumeric = parseInt(topValue, 10);\r\n      const leftNumeric = parseInt(leftValue, 10);\r\n\r\n      const coordinates = {\r\n        name: this.draggedElement.id,\r\n        x: leftNumeric,\r\n        y: topNumeric,\r\n      };\r\n\r\n      this.saveCoordinates(coordinates);\r\n\r\n      this.draggedElement = null;\r\n    }\r\n  }\r\n\r\n  onDragStart(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    this.draggedElement = event.target as HTMLElement;\r\n  }\r\n\r\n  private saveCoordinates(coordinates: any): void {\r\n    this.http.post(`${this.apiUrl}/api/SaveCoordinate`, coordinates)\r\n      .subscribe(\r\n        (response) => {\r\n          console.log('Coordinate salvate:', coordinates);\r\n        },\r\n        (error) => {\r\n          console.error('Errore durante il salvataggio delle coordinate:', error);\r\n        }\r\n      );\r\n  }\r\n\r\n  private getCoordinatesByName(elementName: string): void {\r\n    this.http.get<any>(`${this.apiUrl}/api/GetCoordinate?elementName=${elementName}`)\r\n      .subscribe((response: any) => {\r\n        const element: DraggableElement = response;\r\n\r\n        if (element) {\r\n          const name = element.name;\r\n          const elementTop = element.y; \r\n          const elementLeft = element.x; \r\n\r\n          console.log('Coordinate salvate:', name, 'top y' + elementTop, 'left x' + elementLeft);\r\n\r\n          const elementToPosition = document.getElementById(name) as HTMLElement;\r\n\r\n          if (elementToPosition) {\r\n            elementToPosition.style.top = `${elementTop}px`;\r\n            elementToPosition.style.left = `${elementLeft}px`;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private getElements(): void {\r\n    this.http.get<any>(`${this.apiUrl}/api/GetElements`).subscribe((response: any) => {\r\n      const elements: Elements[] = response;\r\n\r\n      if (elements) {\r\n        elements.forEach((element: Elements) => {\r\n          this.elements.push(element);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}