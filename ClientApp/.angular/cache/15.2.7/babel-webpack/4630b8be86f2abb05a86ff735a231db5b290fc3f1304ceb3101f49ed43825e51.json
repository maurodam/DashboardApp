{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nlet DraggableElementComponent = class DraggableElementComponent {\n  constructor(http) {\n    this.http = http;\n    this.isDragging = false;\n    this.draggedElement = null;\n    this.apiUrl = 'https://localhost:7164';\n  }\n  ngOnInit() {\n    this.getCoordinatesByName('element1');\n  }\n  onDrag(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.draggedElement.style.left = event.clientX + 'px';\n      this.draggedElement.style.top = event.clientY + 'px';\n    }\n  }\n  onDragEnd(event) {\n    if (this.isDragging && this.draggedElement) {\n      this.isDragging = false;\n      // Ottieni le coordinate dell'elemento trascinato come stringhe\n      const topValue = this.draggedElement.style.top;\n      const leftValue = this.draggedElement.style.left;\n      // Rimuovi \"px\" dai valori e converti in numeri\n      const topNumeric = parseInt(topValue, 10);\n      const leftNumeric = parseInt(leftValue, 10);\n      const coordinates = {\n        name: this.draggedElement.id,\n        x: topNumeric,\n        y: leftNumeric\n      };\n      // Invia le coordinate al backend tramite una chiamata API\n      this.saveCoordinates(coordinates);\n      this.draggedElement = null;\n    }\n  }\n  onDragStart(event) {\n    this.isDragging = true;\n    this.draggedElement = event.target;\n  }\n  saveCoordinates(coordinates) {\n    this.http.post(`${this.apiUrl}/api/SaveCoordinate`, coordinates).subscribe(response => {\n      console.log('Coordinate salvate:', coordinates);\n    }, error => {\n      console.error('Errore durante il salvataggio delle coordinate:', error);\n      // Puoi gestire l'errore qui, ad esempio, mostrare un messaggio all'utente o effettuare altre azioni\n    });\n  }\n\n  getCoordinatesByName(elementName) {\n    this.http.get(`${this.apiUrl}/api/GetCoordinate?elementName=${elementName}`).subscribe(response => {\n      const elements = response;\n      const element = elements.find(e => e.name === elementName);\n      if (element) {\n        const elementName = element.name;\n        const elementTop = element.y; // Assumendo che Y sia la coordinata verticale\n        const elementLeft = element.x; // Assumendo che X sia la coordinata orizzontale\n        console.log('Coordinate salvate:', elementName, elementTop, elementLeft);\n        if (this.draggedElement) {\n          const elementToPosition = this.draggedElement.querySelector(`#${elementName}`);\n          if (elementToPosition) {\n            elementToPosition.style.top = `${elementTop}px`;\n            elementToPosition.style.left = `${elementLeft}px`;\n          }\n        }\n      }\n    });\n  }\n};\n__decorate([HostListener('document:mousemove', ['$event'])], DraggableElementComponent.prototype, \"onDrag\", null);\n__decorate([HostListener('document:mouseup', ['$event'])], DraggableElementComponent.prototype, \"onDragEnd\", null);\nDraggableElementComponent = __decorate([Component({\n  selector: 'app-draggable-element',\n  templateUrl: './draggable-element.component.html',\n  styleUrls: ['./draggable-element.component.css']\n})], DraggableElementComponent);\nexport { DraggableElementComponent };","map":{"version":3,"mappings":"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","names":["Component","HostListener","DraggableElementComponent","constructor","http","ngOnInit","getCoordinatesByName","onDrag","event","isDragging","draggedElement","style","left","clientX","top","clientY","onDragEnd","topValue","leftValue","topNumeric","parseInt","leftNumeric","coordinates","name","id","x","y","saveCoordinates","onDragStart","target","post","apiUrl","subscribe","response","console","log","error","elementName","get","elements","element","find","e","elementTop","elementLeft","elementToPosition","querySelector","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\src\\dotnet\\DashboardApp\\ClientApp\\src\\app\\components\\draggable-element\\draggable-element.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DraggableElement } from '../../models/draggable-element.model';\r\n\r\n@Component({\r\n  selector: 'app-draggable-element',\r\n  templateUrl: './draggable-element.component.html',\r\n  styleUrls: ['./draggable-element.component.css'],\r\n})\r\n\r\n\r\nexport class DraggableElementComponent implements OnInit {\r\n  private isDragging = false;\r\n  private draggedElement: HTMLElement | null = null;\r\n  private apiUrl = 'https://localhost:7164';\r\n  constructor(private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getCoordinatesByName('element1');\r\n  }\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDrag(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.draggedElement.style.left = event.clientX + 'px';\r\n      this.draggedElement.style.top = event.clientY + 'px';\r\n    }\r\n  }\r\n\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onDragEnd(event: MouseEvent): void {\r\n    if (this.isDragging && this.draggedElement) {\r\n      this.isDragging = false;\r\n\r\n      // Ottieni le coordinate dell'elemento trascinato come stringhe\r\n      const topValue = this.draggedElement.style.top;\r\n      const leftValue = this.draggedElement.style.left;\r\n\r\n      // Rimuovi \"px\" dai valori e converti in numeri\r\n      const topNumeric = parseInt(topValue, 10);\r\n      const leftNumeric = parseInt(leftValue, 10);\r\n\r\n      const coordinates = {\r\n        name: this.draggedElement.id,\r\n        x: topNumeric,\r\n        y: leftNumeric,\r\n      };\r\n\r\n      // Invia le coordinate al backend tramite una chiamata API\r\n      this.saveCoordinates(coordinates);\r\n\r\n      this.draggedElement = null;\r\n    }\r\n  }\r\n\r\n\r\n  onDragStart(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    this.draggedElement = event.target as HTMLElement;\r\n  }\r\n\r\n  private saveCoordinates(coordinates: any): void {\r\n\r\n\r\n    this.http.post(`${this.apiUrl}/api/SaveCoordinate`, coordinates)\r\n      .subscribe(\r\n        (response) => {\r\n          console.log('Coordinate salvate:', coordinates);\r\n        },\r\n        (error) => {\r\n          console.error('Errore durante il salvataggio delle coordinate:', error);\r\n          // Puoi gestire l'errore qui, ad esempio, mostrare un messaggio all'utente o effettuare altre azioni\r\n        }\r\n      );\r\n  }\r\n\r\n  private getCoordinatesByName(elementName: string): void {\r\n  this.http.get<any>(`${this.apiUrl}/api/GetCoordinate?elementName=${elementName}`)\r\n      .subscribe((response: any) => {\r\n        const elements: DraggableElement[] = response;\r\n\r\n        const element = elements.find(e => e.name === elementName);\r\n\r\n        if (element) {\r\n          const elementName = element.name;\r\n          const elementTop = element.y; // Assumendo che Y sia la coordinata verticale\r\n          const elementLeft = element.x; // Assumendo che X sia la coordinata orizzontale\r\n\r\n          console.log('Coordinate salvate:', elementName, elementTop, elementLeft);\r\n\r\n          if (this.draggedElement) {\r\n            const elementToPosition = this.draggedElement.querySelector(`#${elementName}`) as HTMLElement;\r\n\r\n            if (elementToPosition) {\r\n              elementToPosition.style.top = `${elementTop}px`;\r\n              elementToPosition.style.left = `${elementLeft}px`;\r\n            }\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}